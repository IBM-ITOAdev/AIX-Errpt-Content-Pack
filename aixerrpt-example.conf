##################################################
# Logstash for AIX Errpt Logs
#
# v1.0 	12/15/14	Doug McClure
#
##################################################

input {

	file {
		type => "aixerrpt"
        path => ["/path/to/errpt.log"]
		#for bulk uploading of a log sample
		start_position => "beginning"
    } # end file
	
} #end inputs

filter {

###################

if [type] == "aixerrpt" {

    multiline {
        pattern => "%{SEPARATOR}"
		#pattern => '----+'
		patterns_dir => "/opt/logstash150b1/patterns/"
        stream_identity => "%{host}.%{path}"
        what => "previous"
        negate => true
    } #end multi

    if "multiline" in [tags] {
        mutate {
            gsub => [ "message", '----+', '' ]
            gsub => [ "message", '\n', '' ]
            add_tag => [ "remove separator and newlines" ]
        } #end mutate

		grok {
			match => ["message", "%{AIXERRPTBLK}"]
			#for logstash 1.4.2, place into /patterns dir and this setting isn't needed
			#for logstash 1.5 beta - you must add the patterns dir location
			patterns_dir => "/opt/logstash150b1/patterns/"
			add_tag => [ "AIXerrpt-Grokked" ]
		} #end main grok
    } #end multiline conditional
	
	mutate {
		replace => [ "host", "aixerrpt", "path", "aixerrpt"]
		add_tag => ["aixerrpt-final"]
	} #end SCALA host/path setup
	
} #end type aixerrpt

####################
	
} #end filters

output {

##################################	
#for new logstash scala outuput 
##################################

if "aixerrpt-final" in [tags] {
	scala { 
		scala_url => "https://9.42.48.152:9987/Unity/DataCollector"
		scala_user => "unityadmin" 
		scala_password => "unityadmin" 
		batch_size => 500000
		idle_flush_time => 5 
		sequential_flush => false
		num_concurrent_writers => 5
		use_structured_api => false
		disk_cache_path => "/opt/logstash/cache/aixerrpt"
		scala_fields => {
		   "aixerrpt@aixerrpt" => "LABEL,IDENTIFIER,origTIMESTAMP,SEQUENCENUMBER,MACHINEID,NODEID,CLASS,TYPE,WPAR,RESOURCENAME,DESCRIPTION"
		} #end scala_fields
		date_format_string => "yyyy-MM-dd'T'HH:mm:ssX"
	} #end scala output
} #end scala output conditional


################################
# for debugging
################################

stdout
	{
	codec => rubydebug
	}

if "_grokparsefailure" in [tags] {
	file {
		codec => rubydebug
		path => "/opt/logstash/SCALA-debug.log"
	} # end file 
} #end conditional

################################

} #end outputs
